import uuid
import json
import re


def parse_extra_meta(meta):
    extra_meta = json.loads(meta)
    if extra_meta.get('channel_names') is not None:
        ch_names = extra_meta['channel_names']
        return ch_names
    else:
        return None


def get_channel_metadata(tag_Images, channel_ids):
    """ Get information from microscope xml file that is specific for each channel:
    about channel names, fluorophore names, binning, working wavelengths, acquisition mode, illumination type.

    Args:
        tag_Images:
            Part of xml file that contains tag Images.
        channel_ids:
            Dictionary of channel names and their number out of total number of channels.
            E.g. {'DAPI':0,'Alexa 488':2, 'Atto 425':4}

    Returns:
        Dictionary that have channel names as key and gathered metadata as string value.
    """

    channel_meta = dict()
    for k, v in channel_ids.items():
        ch = tag_Images[v]
        ch_name = ch.find('ChannelName').text
        binning = '"{0}x{1}"'.format(ch.find('BinningX').text, ch.find('BinningY').text)
        acquisition_mode = ch.find('AcquisitionType').text

        if acquisition_mode == 'NipkowConfocal':
            acquisition_mode = 'SpinningDiskConfocal'

        value = ('<Channel Name="' + ch_name + '" ' +
                 'Fluor="' + ch_name + '" ' +
                 'AcquisitionMode="' + acquisition_mode + '" ' +
                 'IlluminationType="' + ch.find('IlluminationType').text + '" ' +
                 'ContrastMethod="' + ch.find('ChannelType').text + '" ' +
                 'ExcitationWavelength="' + ch.find('MainExcitationWavelength').text + '" ' +
                 'EmissionWavelength="' + ch.find('MainEmissionWavelength').text + '" ' +
                 'SamplesPerPixel="1">' +
                 '<DetectorSettings Binning=' + binning + ' ID="Detector:0:0" />')

        new_ch = {ch_name: value}
        channel_meta.update(new_ch)

    return channel_meta


def create_ome_metadata(tag_Name, X, Y, C, Z, T, dtype, channel_meta, tag_Images, tag_MeasurementStartTime, extra_meta=None):
    """ Functions that generates OME-XML metadata from microscope XML metadata.
    Args:
        tag_Name (str):
            Part of the microscope xml that contains tag Name.
        X,Y,C,Z,T (int):
            Dimensions of the output image.
        dtype (str):
            Image datatype, currently only uint16.
        channel_meta (dict):
            Dictionary that have channel names as key and gathered metadata as string value.
            Generated by function get_channel_metadata.
        tag_Images (xml):
            Part of xml file that contains tag Images.
        tag_MeasurementStartTime (str):
            Part of xml file that contains tag MeasurementStartTime.

    Returns:
        String that contains OME-XML.
    """

    dim_order = 'XYCZT'

    xml_start = '<?xml version="1.0" encoding="UTF-8"?>'

    header = ('<OME xmlns="http://www.openmicroscopy.org/Schemas/OME/2016-06" ' +
              'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:str="http://exslt.org/strings" ' +
              'Creator="stitcher" UUID="urn:uuid:{0}" ' +
              'xsi:schemaLocation="http://www.openmicroscopy.org/Schemas/OME/2016-06 ' +
              'http://www.openmicroscopy.org/Schemas/OME/2016-06/ome.xsd">')
    imageid = str(uuid.uuid4())
    header = header.format(imageid)

    detector = tag_Images[0].find('CameraType').text
    NA = tag_Images[0].find('ObjectiveNA').text
    magnification = tag_Images[0].find('ObjectiveMagnification').text
    instrument = ('<Instrument ID="Instrument:0">' +
                  '<Detector ID="Detector:0:0" Model="{0}" />' +
                  '<Objective ID="Objective:0"  LensNA="{1}"  NominalMagnification="{2}"/>' +
                  '</Instrument>')
    instrument = instrument.format(detector, NA, magnification)

    image = '<Image ID="Image:0" Name="{0}"><AcquisitionDate>{1}</AcquisitionDate>'.format(tag_Name + '.tif',
                                                                                           tag_MeasurementStartTime)
    # multiply by million to convert from metre to um
    physical_size_x = float(tag_Images[0].find('ImageResolutionX').text) * 1e6
    physical_size_y = float(tag_Images[0].find('ImageResolutionY').text) * 1e6
    pixels = ('<Pixels DimensionOrder="{0}" ID="Pixels:0" SignificantBits="{7}" Interleaved="false" ' +
              'PhysicalSizeX="{8}" PhysicalSizeY="{9}" ' +
              'SizeC="{1}" SizeT="{2}" SizeX="{3}" SizeY="{4}" SizeZ="{5}" Type="{6}">')
    pixels = pixels.format(dim_order, C, T, X, Y, Z, dtype, dtype.replace('uint' or 'int' or 'float', ''),
                           physical_size_x, physical_size_y)

    channel = ''
    plane = ''
    IFD = 0

    if extra_meta is not None:
        extra_meta_ch_name = parse_extra_meta(extra_meta)

        for k, v in extra_meta_ch_name.items():
            if k in channel_meta.keys():
                channel_meta[k] = re.sub('Name="' + k + '"', 'Name="' + v + '"', channel_meta[k])

    for t in range(0, T):
        for c, ch_name in enumerate(channel_meta):
            channel += '{0}</Channel>'.format(channel_meta[ch_name])
            for p in range(0, Z):
                plane += '<TiffData FirstC="{0}" FirstT="{1}" FirstZ="{2}" IFD="{3}" PlaneCount="1"></TiffData>'.format(
                    c, t, p, IFD)
                IFD += 1

    footer = '</Pixels></Image></OME>'
    meta = xml_start + header + instrument + image + pixels + channel + plane + footer
    return meta
